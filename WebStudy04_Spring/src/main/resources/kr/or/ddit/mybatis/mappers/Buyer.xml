<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.buyer.dao.BuyerDAO">
	<resultMap type="BuyerVO" id="buyerMap" autoMapping="true">
		<id property="buyerId" column="BUYER_ID"/>
		<association property="lprod" javaType="hashmap">
			<id property="lprodGu" column="LPROD_GU"/>
			<result property="lprodNm" column="LPROD_NM"/>
		</association>
		<collection property="prodList" javaType="list" ofType="ProdVO" autoMapping="true">
			<id property="prodId" column="PROD_ID"/>
		</collection>
	</resultMap>

	<select id="selectBuyer" resultMap="buyerMap" parameterType="string">
		SELECT 
			BUYER_ID
		    , BUYER_NAME
		    , BUYER_LGU
		    , BUYER_BANK
		    , BUYER_BANKNO
		    , BUYER_BANKNAME
		    , BUYER_ZIP
		    , BUYER_ADD1
		    , BUYER_ADD2
		    , BUYER_COMTEL
		    , BUYER_FAX
		    , BUYER_MAIL
		    , BUYER_CHARGER
		    , BUYER_TELEXT
		    , BUYER_MAIL2
		    , BUYER_CHARGER2
		    , BUYER_TELEXT2
		    , LPROD_GU
		    , LPROD_NM
		    , PROD_ID
		    , PROD_NAME
		    , PROD_COST
		    , PROD_PRICE
		    , PROD_MILEAGE
		    , PROD_SALE
		FROM BUYER 
			INNER JOIN LPROD ON (BUYER.BUYER_LGU = LPROD.LPROD_GU)
			LEFT OUTER JOIN PROD ON (BUYER_ID = PROD_BUYER)
		WHERE 
			BUYER_ID = #{buyerId}
	</select>
	
	<select id="selectTotalRecord" resultType="int" parameterType="kr.or.ddit.common.paging.PaginationInfo">
		SELECT COUNT(*)
		FROM BUYER
		<include refid="searchFrag"></include>
	</select>
	
	<resultMap type="BuyerVO" id="buyerListMap" autoMapping="true">
		<id property="buyerId" column="BUYER_ID"/>	
		<association property="lprod" javaType="hashmap">
			<result property="lprodGu" column="LPROD_GU"/>
			<result property="lprodNm" column="LPROD_NM"/>
		</association>
	</resultMap>
	
	<select id="selectBuyerList" resultMap="buyerListMap" parameterType="kr.or.ddit.common.paging.PaginationInfo">
		WITH ORDERED AS(
		    SELECT 	
			    BUYER_ID,
			    BUYER_NAME,
			    BUYER_LGU,
			    BUYER_BANK,
			    BUYER_BANKNO,
			    BUYER_BANKNAME,
			    BUYER_ZIP,
			    BUYER_ADD1,
			    BUYER_ADD2,
			    BUYER_COMTEL,
			    BUYER_FAX,
			    BUYER_MAIL,
			    BUYER_CHARGER,
			    BUYER_TELEXT,
			    LPROD_GU,
			    LPROD_NM
		    FROM BUYER 
		    	INNER JOIN LPROD ON (BUYER_LGU = LPROD_GU)
			<include refid="searchFrag"></include>
		    ORDER BY BUYER_LGU, BUYER_ID, BUYER_NAME
			), RNUMPROD AS(
		 	   SELECT ORDERED.*, ROWNUM RNUM
		 	   FROM ORDERED
		    )
		    SELECT * 
		    FROM RNUMPROD
		    WHERE RNUM BETWEEN #{startRow} AND #{endRow}
	</select>
	
		<sql id="searchFrag">
		<trim prefix="WHERE" suffixOverrides="AND">
			<if test="not detailCondition.empty">
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.buyerLgu)">
					BUYER_LGU = #{detailCondition.buyerLgu} AND
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.buyerAdd1)">
					INSTR(BUYER_ADD1, #{detailCondition.buyerAdd1}) > 0 AND
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.buyerName)">
					INSTR(BUYER_NAME, #{detailCondition.buyerName}) > 0 AND				
				</if>
			</if>
		</trim>
	</sql>
	
	<insert id="insertBuyer" parameterType="BuyerVO">
		<selectKey order="BEFORE" resultType="string" keyProperty="buyerId">
			SELECT 
			    #{buyerLgu} || LPAD(NVL(TO_NUMBER(SUBSTR(MAX(BUYER_ID), 5)), 0) + 1, 2, '0')
			FROM BUYER
			WHERE BUYER_LGU = #{buyerLgu}
		</selectKey>
			INSERT INTO BUYER (
			    BUYER_ID,
			    BUYER_NAME,
			    BUYER_LGU,
			    BUYER_BANK,
			    BUYER_BANKNO,
			    BUYER_BANKNAME,
			    BUYER_ZIP,
			    BUYER_ADD1,
			    BUYER_ADD2,
			    BUYER_COMTEL,
			    BUYER_FAX,
			    BUYER_MAIL,
			    BUYER_CHARGER,
			    BUYER_TELEXT,
			    BUYER_MAIL2,
			    BUYER_CHARGER2,
			    BUYER_TELEXT2
			) VALUES (
				 #{buyerId}
				 , #{buyerName ,jdbcType=VARCHAR}
				 , #{buyerLgu ,jdbcType=CHAR}
				 , #{buyerBank ,jdbcType=VARCHAR}
				 , #{buyerBankno ,jdbcType=VARCHAR}
				 , #{buyerBankname ,jdbcType=VARCHAR}
				 , #{buyerZip ,jdbcType=CHAR}
				 , #{buyerAdd1 ,jdbcType=VARCHAR}
				 , #{buyerAdd2 ,jdbcType=VARCHAR}
				 , #{buyerComtel ,jdbcType=VARCHAR}
				 , #{buyerFax ,jdbcType=VARCHAR}
				 , #{buyerMail ,jdbcType=VARCHAR}
				 , #{buyerCharger ,jdbcType=VARCHAR}
				 , #{buyerTelext ,jdbcType=VARCHAR}
				 , #{buyerMail2 ,jdbcType=VARCHAR}
				 , #{buyerCharger2 ,jdbcType=VARCHAR}
				 , #{buyerTelext2 ,jdbcType=VARCHAR}
			)
	</insert>
	<update id="updateBuyer" parameterType="BuyerVO">
		UPDATE BUYER
		SET
		    BUYER_NAME 			= #{buyerName ,jdbcType=VARCHAR}
		    , BUYER_BANK	    = #{buyerBank ,jdbcType=VARCHAR}
		    , BUYER_BANKNO 		= #{buyerBankno ,jdbcType=VARCHAR}
		    , BUYER_BANKNAME	= #{buyerBankname ,jdbcType=VARCHAR}
		    , BUYER_ZIP 		= #{buyerZip ,jdbcType=CHAR}
		    , BUYER_ADD1 		= #{buyerAdd1 ,jdbcType=VARCHAR}
		    , BUYER_ADD2 		= #{buyerAdd2 ,jdbcType=VARCHAR}
		    , BUYER_COMTEL 		= #{buyerComtel ,jdbcType=VARCHAR}
		    , BUYER_FAX 		= #{buyerFax ,jdbcType=VARCHAR}
		    , BUYER_MAIL 		= #{buyerMail ,jdbcType=VARCHAR}
		    , BUYER_CHARGER 	= #{buyerCharger ,jdbcType=VARCHAR}
		    , BUYER_TELEXT 		= #{buyerTelext ,jdbcType=VARCHAR}
		    , BUYER_MAIL2 		= #{buyerMail2 ,jdbcType=VARCHAR}
		    , BUYER_CHARGER2 	= #{buyerCharger2 ,jdbcType=VARCHAR}
		    , BUYER_TELEXT2		= #{buyerTelext2 ,jdbcType=VARCHAR}
		WHERE
			BUYER_ID = #{buyerId}
	</update>
	<delete id="deleteBuyer" parameterType="string">
		DELETE 
			FROM BUYER
		WHERE
        	BUYER_ID = #{buyerId}
		
	</delete>
	
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
	
	>

<!-- 	컨테이너의 빈 관리 특성 -->
<!-- 	1. 구체적인 설정(scope)이 없는 한 빈을 대상으로 싱글턴으로 관리함. -->
<!-- 		singlton - 몇번을 주입받더라도 동일한 객체로 주입(주입횟수와 무관하게 동일한 빈이 주입됨.) -->
<!-- 		prototype(+lazy-init) - 주입될때마다 새로운 객체가 생성 및 주입됨. -->
<!-- 	2. 구체적인 설정(lazy-init)이 없는 한 등록된 모든 빈들을 컨테이너와 동시에 객체 생성 및 메모리 로딩 작업. -->
<!-- 	3. 빈 객체 생성 순서 제어시 depends-on을 사용하나, 실제 주입은 이루어지지 않는다.  -->
<!-- 	depends-on => 의존을 할수도 있으니까 쟤 먼저 만들어 -->
<!-- 	4. 컨테이너의 기본 특성이 콜백 구조를 활용함. -->
<!-- 	컨테이너는 생명주기 관리자이므로 해당 생명주기 내의 주요 이벤트에서 콜백 구조를 활용하고 있음. -->
<!-- 	init-method(bean 객체가 생성되고 필요한 주입이 완료된 이후 ***), destroy-method(shutdownhook 때문에 언제 실행될지 모름 안될수도 있음) -->
	
	<bean id="bibitan" class="kr.or.ddit.case2.meterial.Bibitan" lazy-init="true"/>
	<bean id="shotGun" class="kr.or.ddit.case2.meterial.ShotGun" />
	
	<bean id="hunter" class="kr.or.ddit.case2.meterial.Hunter"
		c:gun-ref="shotGun"
	/>
		
</beans>
